{"version":3,"sources":["redux/actionTypes.js","redux/reducer/postsReducer.js","redux/reducer/appReducer.js","redux/rootReducer.js","components/PostForm.js","redux/action.js","components/Post.js","components/Posts.js","components/Loader.js","components/FetchedPosts.js","App.js","reportWebVitals.js","index.js"],"names":["CREATE_POST","FETCH_POST","SHOW_LOADER","HIDE_LOADER","initialState","posts","fetchedPosts","loading","combineReducers","state","action","type","concat","payload","app","PostForm","props","submitHandler","event","preventDefault","title","trim","newPost","id","Date","now","toString","createPost","setState","changeInputHandler","prev","target","name","value","onSubmit","this","className","htmlFor","onChange","React","Component","mapDispatchToProps","post","connect","syncPost","length","map","Post","role","dispatch","useDispatch","useSelector","Loader","onClick","a","fetch","response","json","setTimeout","App","FetchedPosts","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","createStore","rootReducer","compose","applyMiddleware","thunk","window","__REDUX_DEVTOOLS_EXTENSION__","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.35ceb31b.chunk.js","sourcesContent":["export const CREATE_POST = 'POST/CREATE_POST'\nexport const FETCH_POST = 'POST/FETCH_POST'\nexport const SHOW_LOADER = 'APP/SHOW_LOADER'\nexport const HIDE_LOADER = 'APP/HIDE_LOADER'","import {CREATE_POST, FETCH_POST} from '../actionTypes'\n\nconst initialState = {\n    posts: [],\n    fetchedPosts: []\n}\n\nexport const postsReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case CREATE_POST:\n            /*return {...state, posts: [...state.posts, action.payload]}*/\n            return {...state, posts: state.posts.concat([action.payload])}\n        case FETCH_POST:\n            return {...state, fetchedPosts: action.payload}\n        default:\n            return state\n    }\n}","import {HIDE_LOADER, SHOW_LOADER} from '../actionTypes'\n\nconst initialState = {\n    loading: false\n}\n\nexport const appReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case SHOW_LOADER:\n            return {...state, loading: true}\n        case HIDE_LOADER:\n            return {...state, loading: false}\n        default:\n            return state\n    }\n}","import {combineReducers} from 'redux'\nimport {postsReducer} from './reducer/postsReducer'\nimport {appReducer} from './reducer/appReducer'\n\nexport default combineReducers({\n    posts: postsReducer,\n    app: appReducer\n})","import React from 'react'\nimport {connect} from 'react-redux'\nimport {createPost} from '../redux/action'\n\nclass PostForm extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            title: ''\n        }\n    }\n\n    submitHandler = event => {\n        event.preventDefault()\n\n        const {title} = this.state\n\n        if(!title.trim()){\n            return\n        }\n\n        const newPost = {\n            title,\n            id: Date.now().toString()\n        }\n        this.props.createPost(newPost)\n        this.setState({title: ''})\n    }\n\n    changeInputHandler = event => {\n        this.setState(prev => ({...prev, ...{\n                [event.target.name]: event.target.value\n            }}))\n    }\n\n    render() {\n        return (\n            <form onSubmit={this.submitHandler}>\n                <div className=\"form-group\">\n                    <label htmlFor=\"title\" className=\"form-label\">Заголовок поста</label>\n                    <input\n                        type=\"text\"\n                        className=\"form-control\"\n                        id=\"title\"\n                        value={this.state.title}\n                        name=\"title\"\n                        onChange={this.changeInputHandler}\n                    />\n                </div>\n                <hr/>\n                <button className=\"btn btn-success\" type=\"submit\">Создать</button>\n                <hr/>\n            </form>\n        )\n    }\n}\n\nconst mapDispatchToProps = {\n    createPost\n}\n\nexport default connect(null, mapDispatchToProps)(PostForm)","import {CREATE_POST, FETCH_POST, HIDE_LOADER, SHOW_LOADER} from './actionTypes'\n\nexport function createPost(post) {\n    return {\n        type: CREATE_POST,\n        payload: post\n    }\n}\n\nexport function showLoader() {\n    return {\n        type: SHOW_LOADER\n    }\n}\n\nexport function hideLoader() {\n    return {\n        type: HIDE_LOADER\n    }\n}\n\nexport function fetchPosts() {\n    return async dispatch => {\n        dispatch(showLoader())\n        const response = await fetch('http://jsonplaceholder.typicode.com/posts?_limit=5')\n        const json = await response.json()\n        setTimeout(()=>{\n            dispatch({ type: FETCH_POST, payload: json})\n            dispatch(hideLoader())\n        }, 1500)\n    }\n}","import React from 'react'\n\n// eslint-disable-next-line\nexport default ({post}) => {\n    return (\n        <div className=\"card\">\n            <div className=\"card-body\">\n                <h5 className=\"card-title\">{post.title}</h5>\n            </div>\n        </div>\n    )\n}","import React from 'react'\nimport Post from './Post'\nimport {connect} from 'react-redux'\n\n// eslint-disable-next-line\nconst Posts = ({syncPost}) => {\n    if(!syncPost.length) {\n        return <p className=\"text-center\">Постов пока нет</p>\n    }\n    return syncPost.map(post => <Post post={post} key={post.id}/>)\n}\n\nconst mapStateToProps = state => {\n    return {\n        syncPost: state.posts.posts\n    }\n}\n\nexport default connect(mapStateToProps, null)(Posts)","import React from 'react'\n// eslint-disable-next-line\nexport default () => {\n    return (\n        <div className=\"spinner-border\" role=\"status\">\n            <span className=\"visually-hidden\">Loading...</span>\n        </div>\n    )\n}","import React from 'react'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {fetchPosts} from '../redux/action'\nimport Post from './Post'\nimport Loader from './Loader'\n\n// eslint-disable-next-line\nexport default () => {\n    const dispatch = useDispatch()\n    const posts = useSelector(state => state.posts.fetchedPosts)\n    const loading = useSelector(state => state.app.loading)\n\n    if (loading) {\n        return (\n            <Loader />\n        )\n    }\n\n    if (!posts.length) {\n        return <button\n            className=\"btn btn-primary\"\n            onClick={() => dispatch(fetchPosts())}\n        >Загрузить</button>\n    }\n    return posts.map(post => <Post post={post} key={post.id}/>)\n}","import React from 'react'\nimport PostForm from './components/PostForm'\nimport Posts from './components/Posts'\nimport FetchedPosts from './components/FetchedPosts'\n\nconst App = props => {\n    return (\n        <div className=\"container pt-3\">\n            <div className=\"row\">\n                <div className=\"col\">\n                    <PostForm />\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col\">\n                    <h2>Синхронные Посты</h2>\n                    <Posts />\n                </div>\n                <div className=\"col\">\n                    <h2>Асинхронные Посты</h2>\n                    <FetchedPosts />\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport {render} from 'react-dom'\nimport {compose, createStore, applyMiddleware} from 'redux'\nimport {Provider} from 'react-redux'\nimport thunk from 'redux-thunk'\nimport rootReducer from './redux/rootReducer'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\n\nconst store = createStore(rootReducer, compose(\n    applyMiddleware(\n         thunk\n    ),\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n))\n\nconst app = (\n    <Provider store={store}>\n        <App/>\n    </Provider>\n)\n\nrender(<React.StrictMode>{app}</React.StrictMode>, document.getElementById('root'))\nreportWebVitals();\n"],"sourceRoot":""}